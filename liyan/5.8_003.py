# 函数的参数传递
# 1、关键字参数-实例说明
# 用于函数调用，通过“键-值”形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。
# print_hello('tanggu', sex=1)
# print_hello(name='tanggu', sex=1)
# print_hello(sex=1,name='tanggu')

# 通过上面的代码，我们可以发现：有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序的

# 2、默认参数-实例说明
# 用于定义函数，为参数提供默认值，调用函数时可传可不传该默认参数的值
# （注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）
# 默认参数定义方式，位置参数在前，默认参数灾后
# def print_hello(name,sex=1):
  # 调用时不传sex值，则使用默认值1
# print_hello('tanggu')

# 调用时传入sex值，并指定为2
# print_hello('tanggu',2)

# 3、可变参数-实例说明
# 定义函数时，有时候我们不确定调用的时候会传递多少个参数(不传参也可以)。
# 此时，可用包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。
# 包裹位置传递
# def func (*args):
#  def funcD(a,b,*c):
#    print a
#   print b
#    print "length of c is:%d" % len(c)
#    print c
# 调用funcD(1,2,3,4,5,6)结果是
1
2
# length of c is: 4
(3,4,5,6)
# 我们看到，前面两个参数被a、b 接受了，剩下的4个参数，全部被c接受了，c在这里是一个tuple,我们在调用funcD
# 的时候，至少要传递2个参数，2个以上的参数，都放到c里了，如果只有两个参数，那么c就是一个empty tuple
# 我们传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，
# args是元组类型，这就是包裹位置传递。

# kargs是一个字典(dict)，收集所有关键字参数
# 如果一个函数定义中的最后一个形参有 ** （双星号）前缀,所有正常形参之外的
# 其他的关键字参数都将被放置在一个字典中传递给函数，比如：
#def funcF(a, **b):
#    print a
#    for x in b:
#        print x + ": " + str(b[x])
# 调用funcF(100, c='你好', b=200)，执行结果
100
# c: 你好
# b: 200
# 大家可以看到，b是一个dict对象实例，它接受了关键字参数b和c。
